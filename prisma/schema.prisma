generator client {
    provider = "prisma-client-js"
}

datasource db {
    provider = "mongodb"
    url      = env("MONGODB_URI")
}

model Accounts {
    id              String            @id @default(uuid()) @map("_id")
    name            String
    lastName        String
    email           String            @unique
    password        String
    country         String
    code_country    String
    city            String
    phone           String
    identity_number String?
    type_identity   TypeIdentity?
    home_address    String
    createdAt       DateTime          @default(now())
    orders          Order[]
    cart            Cart?
    ContactAccount  ContactAccount[]
    CardInfoAccount CardInfoAccount[]
}

model ContactAccount {
    id        String   @id @default(uuid()) @map("_id")
    accountId String
    account   Accounts @relation(fields: [accountId], references: [id])
}

model CardInfoAccount {
    id          String   @id @default(uuid()) @map("_id")
    account     Accounts @relation(fields: [accountId], references: [id])
    accountId   String
    encryptInfo String
    createdAt   DateTime @default(now())
    updatedAt   DateTime @updatedAt
}

model BrandCorrection {
    id            String   @id @default(uuid()) @map("_id")
    originalName  String   @unique
    correctedName String
    createdAt     DateTime @default(now())
    updatedAt     DateTime @updatedAt
}

model Lotion {
    id          String      @id @default(uuid()) @map("_id")
    name        String
    brand       String
    images      String[]
    description String?
    genre       genreLotion
    isAvailable Boolean     @default(true)
    chords      String[]    @default([])
    price       Int
    cartItems   CartItem[]
    orderItems  OrderItem[]
}

model LotionHouse {
    id        String   @id @default(uuid()) @map("_id")
    name      String   @unique
    logo      String?
    createdAt DateTime @default(now())
    updatedAt DateTime @updatedAt
}

model CartItem {
    id         String @id @default(uuid()) @map("_id")
    cartId     String
    cart       Cart   @relation(fields: [cartId], references: [id])
    lotionId   String
    lotion     Lotion @relation(fields: [lotionId], references: [id])
    quantity   Int
    price      Int
    totalPrice Int
}

model Cart {
    id          String     @id @default(uuid()) @map("_id")
    accountId   String     @unique
    account     Accounts   @relation(fields: [accountId], references: [id])
    items       CartItem[]
    totalAmount Int        @default(0)
    createdAt   DateTime   @default(now())
    updatedAt   DateTime   @updatedAt
}

model Order {
    id          String      @id @default(uuid()) @map("_id")
    accountId   String
    account     Accounts    @relation(fields: [accountId], references: [id])
    items       OrderItem[]
    totalAmount Int
    status      orderStatus @default(PENDING)
    createdAt   DateTime    @default(now())
    updatedAt   DateTime    @updatedAt
}

model OrderItem {
    id         String @id @default(uuid()) @map("_id")
    orderId    String
    order      Order  @relation(fields: [orderId], references: [id])
    lotionId   String
    lotion     Lotion @relation(fields: [lotionId], references: [id])
    quantity   Int
    price      Int
    totalPrice Int
}

enum orderStatus {
    PENDING
    SHIPPED
    DELIVERED
    CANCELED
}

enum genreLotion {
    man
    woman
    arab_men
    arab_woman
    unisex
}

enum TypeIdentity {
    CC
    CE
}